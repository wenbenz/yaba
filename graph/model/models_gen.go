// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AggregatedExpendituresResponse struct {
	GroupByCategory *string   `json:"groupByCategory,omitempty"`
	Amount          *float64  `json:"amount,omitempty"`
	SpanStart       *string   `json:"spanStart,omitempty"`
	Span            *Timespan `json:"span,omitempty"`
}

type BudgetResponse struct {
	ID       *string            `json:"id,omitempty"`
	Owner    *string            `json:"owner,omitempty"`
	Name     *string            `json:"name,omitempty"`
	Incomes  []*IncomeResponse  `json:"incomes,omitempty"`
	Expenses []*ExpenseResponse `json:"expenses,omitempty"`
}

type ExpenditureInput struct {
	Date           string  `json:"date"`
	Amount         float64 `json:"amount"`
	Name           *string `json:"name,omitempty"`
	Method         *string `json:"method,omitempty"`
	BudgetCategory *string `json:"budget_category,omitempty"`
	RewardCategory *string `json:"reward_category,omitempty"`
	Comment        *string `json:"comment,omitempty"`
	Source         *string `json:"source,omitempty"`
}

type ExpenditureResponse struct {
	ID             *string `json:"id,omitempty"`
	Owner          *string `json:"owner,omitempty"`
	Name           *string `json:"name,omitempty"`
	Amount         *string `json:"amount,omitempty"`
	Date           *string `json:"date,omitempty"`
	Method         *string `json:"method,omitempty"`
	BudgetCategory *string `json:"budget_category,omitempty"`
	RewardCategory *string `json:"reward_category,omitempty"`
	Comment        *string `json:"comment,omitempty"`
	Created        *string `json:"created,omitempty"`
	Source         *string `json:"source,omitempty"`
}

type ExpenseInput struct {
	Category string  `json:"category"`
	Amount   float64 `json:"amount"`
	IsFixed  *bool   `json:"isFixed,omitempty"`
	IsSlack  *bool   `json:"isSlack,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type ExpenseResponse struct {
	Category *string  `json:"category,omitempty"`
	Amount   *float64 `json:"amount,omitempty"`
	IsFixed  *bool    `json:"isFixed,omitempty"`
	IsSlack  *bool    `json:"isSlack,omitempty"`
	ID       *string  `json:"id,omitempty"`
}

type IncomeInput struct {
	Source string  `json:"source"`
	Amount float64 `json:"amount"`
}

type IncomeResponse struct {
	Source *string  `json:"source,omitempty"`
	Amount *float64 `json:"amount,omitempty"`
}

type Mutation struct {
}

type NewBudgetInput struct {
	Name     string          `json:"name"`
	Incomes  []*IncomeInput  `json:"incomes,omitempty"`
	Expenses []*ExpenseInput `json:"expenses,omitempty"`
}

type PaymentMethod struct {
	ID           string      `json:"id"`
	DisplayName  string      `json:"displayName"`
	AcquiredDate *string     `json:"acquiredDate,omitempty"`
	CancelByDate *string     `json:"cancelByDate,omitempty"`
	CardType     string      `json:"cardType"`
	Rewards      *RewardCard `json:"rewards,omitempty"`
}

type PaymentMethodInput struct {
	DisplayName  *string `json:"displayName,omitempty"`
	AcquiredDate *string `json:"acquiredDate,omitempty"`
	CancelByDate *string `json:"cancelByDate,omitempty"`
	CardType     *string `json:"cardType,omitempty"`
}

type Query struct {
}

type RewardCard struct {
	ID              string  `json:"id"`
	Name            string  `json:"name"`
	Issuer          string  `json:"issuer"`
	Region          string  `json:"region"`
	Version         int     `json:"version"`
	RewardRate      float64 `json:"rewardRate"`
	RewardType      string  `json:"rewardType"`
	RewardCashValue float64 `json:"rewardCashValue"`
}

type RewardCardInput struct {
	Name            string  `json:"name"`
	Issuer          string  `json:"issuer"`
	Region          string  `json:"region"`
	RewardRate      float64 `json:"rewardRate"`
	RewardType      string  `json:"rewardType"`
	RewardCashValue float64 `json:"rewardCashValue"`
}

type UpdateBudgetInput struct {
	ID       string          `json:"id"`
	Name     *string         `json:"name,omitempty"`
	Incomes  []*IncomeInput  `json:"incomes,omitempty"`
	Expenses []*ExpenseInput `json:"expenses,omitempty"`
}

type Aggregation string

const (
	AggregationSum Aggregation = "SUM"
	AggregationAvg Aggregation = "AVG"
)

var AllAggregation = []Aggregation{
	AggregationSum,
	AggregationAvg,
}

func (e Aggregation) IsValid() bool {
	switch e {
	case AggregationSum, AggregationAvg:
		return true
	}
	return false
}

func (e Aggregation) String() string {
	return string(e)
}

func (e *Aggregation) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Aggregation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Aggregation", str)
	}
	return nil
}

func (e Aggregation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroupBy string

const (
	GroupByNone           GroupBy = "NONE"
	GroupByBudgetCategory GroupBy = "BUDGET_CATEGORY"
	GroupByRewardCategory GroupBy = "REWARD_CATEGORY"
)

var AllGroupBy = []GroupBy{
	GroupByNone,
	GroupByBudgetCategory,
	GroupByRewardCategory,
}

func (e GroupBy) IsValid() bool {
	switch e {
	case GroupByNone, GroupByBudgetCategory, GroupByRewardCategory:
		return true
	}
	return false
}

func (e GroupBy) String() string {
	return string(e)
}

func (e *GroupBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroupBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupBy", str)
	}
	return nil
}

func (e GroupBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Timespan string

const (
	TimespanDay   Timespan = "DAY"
	TimespanWeek  Timespan = "WEEK"
	TimespanMonth Timespan = "MONTH"
	TimespanYear  Timespan = "YEAR"
)

var AllTimespan = []Timespan{
	TimespanDay,
	TimespanWeek,
	TimespanMonth,
	TimespanYear,
}

func (e Timespan) IsValid() bool {
	switch e {
	case TimespanDay, TimespanWeek, TimespanMonth, TimespanYear:
		return true
	}
	return false
}

func (e Timespan) String() string {
	return string(e)
}

func (e *Timespan) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Timespan(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Timespan", str)
	}
	return nil
}

func (e Timespan) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

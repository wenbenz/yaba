# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type BudgetResponse {
    id: ID
    owner: String
    name: String
    incomes: [IncomeResponse]
    expenses: [ExpenseResponse]
}

type IncomeResponse {
    source: String
    amount: Float
}

type ExpenseResponse {
    category: String
    amount: Float
    isFixed: Boolean
    isSlack: Boolean
    id: String
}

type ExpenditureResponse {
    id: String
    owner: String
    name: String
    amount: String
    date: String
    method: String
    budget_category: String
    reward_category: String
    comment: String
    created: String
    source: String
}

enum Aggregation {
    SUM
    AVG
}

enum Timespan {
    DAY
    WEEK
    MONTH
    YEAR
}

enum GroupBy {
    NONE
    BUDGET_CATEGORY
    REWARD_CATEGORY
}

type AggregatedExpendituresResponse {
    groupByCategory: String
    amount: Float,
    spanStart: String,
    span: Timespan
}

type RewardCard {
    id: ID!
    name: String!
    issuer: String!
    region: String!
    version: Int!
    rewardType: String!
    categories: [RewardCategory!]
}

type RewardCategory {
    category: String!
    rate: Float!
}

type PaymentMethod {
    id: ID!
    displayName: String!
    acquiredDate: String
    cancelByDate: String
    cardType: ID!
    rewards: RewardCard
}

type Query {
    budget(id: ID!): BudgetResponse
    budgets(first: Int): [BudgetResponse]

    expenditures(filter: String, category: String, source: String,
        since: String, until: String, count: Int, offset: Int): [ExpenditureResponse]
    aggregatedExpenditures(since: String, until: String, span: Timespan,
        groupBy: GroupBy, aggregation: Aggregation): [AggregatedExpendituresResponse]

    paymentMethods: [PaymentMethod!]!
    rewardCards(issuer: String, name: String, region: String, limit: Int, Offset: Int): [RewardCard!]!
}

input NewBudgetInput {
    name: String!
    incomes: [IncomeInput]
    expenses: [ExpenseInput]
}

input UpdateBudgetInput {
    id: ID!
    name: String
    incomes: [IncomeInput]
    expenses: [ExpenseInput]
}

input IncomeInput {
    source: String!
    amount: Float!
}

input ExpenseInput {
    category: String!
    amount: Float!
    isFixed: Boolean = true
    isSlack: Boolean = false
    id: String
}

input ExpenditureInput {
    date: String!
    amount: Float!
    name: String
    method: String
    budget_category: String
    reward_category: String
    comment: String
    source: String
}

input PaymentMethodInput {
    displayName: String
    acquiredDate: String
    cancelByDate: String
    cardType: ID
}

input RewardCategoryInput {
    category: String!
    rate: Float!
}

input RewardCardInput {
    name: String!
    issuer: String!
    region: String!
    rewardType: String!
    rewardCategories: [RewardCategoryInput!]
}

type Mutation {
    createBudget(input: NewBudgetInput!): BudgetResponse
    updateBudget(input: UpdateBudgetInput!): BudgetResponse

    createExpenditures(input: [ExpenditureInput]!): Boolean

    createPaymentMethod(input: PaymentMethodInput!): PaymentMethod!
    updatePaymentMethod(id: ID!, input: PaymentMethodInput!): PaymentMethod!
    deletePaymentMethod(id: ID!): Boolean!

    createRewardCard(input: RewardCardInput!): RewardCard!
}
